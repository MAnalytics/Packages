flush.console()
print(paste(r, length(sd_), sep="_of_"))
print(ccr)
}
#-----------------------------------------------------------------------
#plotting the result
ccr_accuracy
akmedoids_result <- ccr_accuracy #<- akmedoids_result
plot(c(0,8), c(0,1), col="white", frame.plot = FALSE)
abline(h=0)
abline(v=0)
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
plot(c(0,8), c(0,1), col="white", frame.plot = FALSE)
abline(h=0)
abline(v=0)
dev.new()
plot(c(0,8), c(0,1), col="white", frame.plot = FALSE)
abline(h=0)
abline(v=0)
akmedoids_result <- ccr_accuracy #<- akmedoids_result
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
s_comb1 <- c(75, 150, 75)
k<-0:20
sd_ <- as.vector(round(seq(0.02, 7.42, 0.02), digits=2))
ccr_accuracy <- matrix(0, length(sd_), 2)
for(r in 1:length(sd_)){ #r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
head(sim_data)
groups <- sim_data$group
theo_groups <- alphaLabel(groups) #convert to alphabets
theo_groups
sim_data_ <- as.data.frame(cbind(code=(1:nrow(sim_data)), sim_data[, 1:(ncol(sim_data)-1)]))
head(sim_data_)
##}#REGULAR KMEANS
#----------------------------------------------------------
#regular
(option1 <- parALGO())
set.seed(123)
set.seed(123)
OAtrajk_crime <- clusterLongData(traj= sim_data_)
kml(OAtrajk_crime, nbClusters = 3, toPlot = "none", nbRedrawing = 20, parAlgo=option1)
for_Crime <- OAtrajk_crime
#dev.new()
#choice(for_Crime)
set.seed(1234)
ident_groups <- as.vector(getClusters(for_Crime, c(3)))
ident_groups
#re-arrange the groups for the akmedoids
##ident_groups_id <- unique(ident_groups)[order(unique(ident_groups))]
##id_ <- c("A1","B1","C1")  #as.matrix(c("A1","B1","C1"))
##for(m in 1:length(ident_groups_id)){ #m<-1
##which(ident_groups_id==ident_groups_id[m])
##}
#----------------------------------------------------------
#-----------------------
resullt_ <-NULL
#getting stable group ---------------------------------------------------------
stable_ <- ident_groups[(s_comb1[1]+1):((s_comb1[1])+s_comb1[2])]  #   ])
u_ <- unique(stable_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(stable_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
st_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
st_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
stable_gr_ <- cbind(st_label, st_size)
colnames(stable_gr_) <- c("id", "size")
resullt_ <- stable_gr_  #stable group
#getting stable group first ---------------------------------------------------------
rising_ <- ident_groups[1:s_comb1[1]]
u_ <- unique(rising_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-2
t_<-length(which(rising_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(rising_gr_[,1])==as.vector(stable_gr_[,1])){
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, rising_gr_)  #rising group
#getting third (falling) group first ---------------------------------------------------------
falling_ <- ident_groups[(((s_comb1[1])+s_comb1[2])+1):length(ident_groups)]
u_ <- unique(falling_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(falling_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(falling_gr_[,1])==as.vector(stable_gr_[,1])){
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, falling_gr_)  #rising group
ccr <- round(sum(as.numeric(as.character(resullt_[,2])))/sum(s_comb1), digits = 3)
ccr_accuracy[r,1] <- sd_[r]
ccr_accuracy[r,2] <- ccr
flush.console()
print(paste(r, length(sd_), sep="_of_"))
print(ccr)
}
kmeans_result <- ccr_accuracy #<- kmeans_result
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="red", lwd=1, cex=0.5)
sim_ <- "linear2"
s_comb1 <- c(75, 150, 75)
k<-0:20
sd_ <- as.vector(round(seq(0.02, 7.42, 0.02), digits=2))
ccr_accuracy <- matrix(0, length(sd_), 2)
for(r in 1:length(sd_)){ #r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
head(sim_data)
groups <- sim_data$group
theo_groups <- alphaLabel(groups) #convert to alphabets
theo_groups
sim_data_ <- as.data.frame(cbind(code=(1:nrow(sim_data)), sim_data[, 1:(ncol(sim_data)-1)]))
head(sim_data_)
# traj  <-  sim_data_
#AKMEDOIDS
#-----------------------------------------------------
res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=3)
#res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=c(3:20))
clusters <- as.vector(res_$solution)
#clusters <- as.vector(res_$optimSolution)
ident_groups <- clusters
ident_groups
#ident_groups_1 <- ident_groups
#re-arrange the groups for the akmedoids
##ident_groups_id <- unique(ident_groups)[order(unique(ident_groups))]
##id_ <- c("A1","B1","C1")  #as.matrix(c("A1","B1","C1"))
##for(m in 1:length(ident_groups_id)){ #m<-1
##which(ident_groups_id==ident_groups_id[m])
##}
#----------------------------------------------------------
#-----------------------
resullt_ <-NULL
#getting stable group ---------------------------------------------------------
stable_ <- ident_groups[(s_comb1[1]+1):((s_comb1[1])+s_comb1[2])]  #   ])
u_ <- unique(stable_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(stable_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
st_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
st_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
stable_gr_ <- cbind(st_label, st_size)
colnames(stable_gr_) <- c("id", "size")
resullt_ <- stable_gr_  #stable group
#getting stable group first ---------------------------------------------------------
rising_ <- ident_groups[1:s_comb1[1]]
u_ <- unique(rising_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-2
t_<-length(which(rising_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(rising_gr_[,1])==as.vector(stable_gr_[,1])){
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, rising_gr_)  #rising group
#getting third (falling) group first ---------------------------------------------------------
falling_ <- ident_groups[(((s_comb1[1])+s_comb1[2])+1):length(ident_groups)]
u_ <- unique(falling_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(falling_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(falling_gr_[,1])==as.vector(stable_gr_[,1])){
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, falling_gr_)  #rising group
ccr <- round(sum(as.numeric(as.character(resullt_[,2])))/sum(s_comb1), digits = 3)
ccr_accuracy[r,1] <- sd_[r]
ccr_accuracy[r,2] <- ccr
flush.console()
print(paste(r, length(sd_), sep="_of_"))
print(ccr)
}
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="green", lwd=1, cex=0.5)
sim_ <- "linear2"
s_comb1 <- c(75, 150, 75)
k<-0:20
sd_ <- as.vector(round(seq(0.02, 7.42, 0.02), digits=2))
ccr_accuracy <- matrix(0, length(sd_), 2)
for(r in 1:length(sd_)){ #r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
head(sim_data)
groups <- sim_data$group
theo_groups <- alphaLabel(groups) #convert to alphabets
theo_groups
sim_data_ <- as.data.frame(cbind(code=(1:nrow(sim_data)), sim_data[, 1:(ncol(sim_data)-1)]))
head(sim_data_)
##}#REGULAR KMEANS
#----------------------------------------------------------
#regular
(option1 <- parALGO())
set.seed(123)
set.seed(123)
OAtrajk_crime <- clusterLongData(traj= sim_data_)
kml(OAtrajk_crime, nbClusters = 3, toPlot = "none", nbRedrawing = 20, parAlgo=option1)
for_Crime <- OAtrajk_crime
#dev.new()
#choice(for_Crime)
set.seed(1234)
ident_groups <- as.vector(getClusters(for_Crime, c(3)))
ident_groups
#re-arrange the groups for the akmedoids
##ident_groups_id <- unique(ident_groups)[order(unique(ident_groups))]
##id_ <- c("A1","B1","C1")  #as.matrix(c("A1","B1","C1"))
##for(m in 1:length(ident_groups_id)){ #m<-1
##which(ident_groups_id==ident_groups_id[m])
##}
#----------------------------------------------------------
#-----------------------
resullt_ <-NULL
#getting stable group ---------------------------------------------------------
stable_ <- ident_groups[(s_comb1[1]+1):((s_comb1[1])+s_comb1[2])]  #   ])
u_ <- unique(stable_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(stable_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
st_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
st_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
stable_gr_ <- cbind(st_label, st_size)
colnames(stable_gr_) <- c("id", "size")
resullt_ <- stable_gr_  #stable group
#getting stable group first ---------------------------------------------------------
rising_ <- ident_groups[1:s_comb1[1]]
u_ <- unique(rising_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-2
t_<-length(which(rising_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(rising_gr_[,1])==as.vector(stable_gr_[,1])){
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, rising_gr_)  #rising group
#getting third (falling) group first ---------------------------------------------------------
falling_ <- ident_groups[(((s_comb1[1])+s_comb1[2])+1):length(ident_groups)]
u_ <- unique(falling_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(falling_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(falling_gr_[,1])==as.vector(stable_gr_[,1])){
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, falling_gr_)  #rising group
ccr <- round(sum(as.numeric(as.character(resullt_[,2])))/sum(s_comb1), digits = 3)
ccr_accuracy[r,1] <- sd_[r]
ccr_accuracy[r,2] <- ccr
flush.console()
print(paste(r, length(sd_), sep="_of_"))
print(ccr)
}
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="purple", lwd=1, cex=0.5)
#lines(ccr_accuracy[,1], ccr_accuracy[,2], col="black", lwd=1, cex=0.5)
lines(ccr_accuracy[,1], ccr_accuracy[,2], col="purple", lwd=1, cex=0.5)
akmedoids_result
kmeans_result
akmedoids_result
kmeans_result
dev.new()
plot(c(0,4), c(0,1), col="white", frame.plot = FALSE)
data(economics, package="ggplot2")  # load data
economics$index <- 1:nrow(economics)  # create index variable
economics
economics <- economics[1:80, ]  # retail 80rows for better graphical understanding
economics
ccr_accuracy
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
ccr_accuracy
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.10) # 10% smoothing span
loessMod10
smoothed10 <- predict(loessMod10)
economics$date
plot(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
ccr_accuracy <- kmeans_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.10) # 10% smoothing span
smoothed10 <- predict(loessMod10)
plot(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction", xlab="Date", ylab="Unemployment (Median)")
lines(smoothed10, x=x, col="red")
lines(smoothed10, x=ccr_accuracy$x, col="red")
ccr_accuracy <- akmedoids_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.10) # 10% smoothing span
smoothed10 <- predict(loessMod10)
lines(smoothed10, x=ccr_accuracy$x, col="blue")
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
lines(smoothed10, x=ccr_accuracy$x, col="blue")
ccr_accuracy <- akmedoids_result
ccr_accuracy <- akmedoids_result
ccr_accuracy <- akmedoids_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
plot(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction",
xlab="Date", ylab="Unemployment (Median)", add=TRUE)
dev.new()
plot(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction",
xlab="Date", ylab="Unemployment (Median)", add=TRUE)
ccr_accuracy <- kmeans_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
plot(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction",
xlab="Date", ylab="Unemployment (Median)", add=TRUE)
ccr_accuracy <- akmedoids_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
lines(ccr_accuracy$y, x=ccr_accuracy$x, type="l", main="Loess Smoothing and Prediction",
xlab="Date", ylab="Unemployment (Median)", col="red")
ccr_accuracy <- akmedoids_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
lines(smoothed10, x=ccr_accuracy$x, col="red")
ccr_accuracy <- kmeans_result
colnames(ccr_accuracy) <- c("x", "y")
ccr_accuracy <- as.data.frame(ccr_accuracy)
loessMod10 <- loess(y ~ x, data=ccr_accuracy, span=0.50) # 10% smoothing span
smoothed10 <- predict(loessMod10)
lines(smoothed10, x=ccr_accuracy$x, col="black")
getwd()
wd <- "C:/Users/monsu/Documents/UNI DESKTOP BACKUP _13062019/myDoc/Monsuru_WMD_12062018/jqc_simulated_data_revision/"
sim_ <- "linear"
s_comb1 <- c(75, 150, 75)
k<-0:20
sd_ <- as.vector(round(seq(0.02, 10, 0.02), digits=2))
ccr_accuracy <- matrix(0, length(sd_), 2)
for(r in 1:length(sd_)){ #r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
head(sim_data)
groups <- sim_data$group
theo_groups <- alphaLabel(groups) #convert to alphabets
theo_groups
sim_data_ <- as.data.frame(cbind(code=(1:nrow(sim_data)), sim_data[, 1:(ncol(sim_data)-1)]))
head(sim_data_)
# traj  <-  sim_data_
#AKMEDOIDS
#-----------------------------------------------------
res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=3)
#res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=c(3:20))
clusters <- as.vector(res_$solution)
#clusters <- as.vector(res_$optimSolution)
ident_groups <- clusters
ident_groups
#ident_groups_1 <- ident_groups
##id_ <- c("A1","B1","C1")  #as.matrix(c("A1","B1","C1"))
##for(m in 1:length(ident_groups_id)){ #m<-1
##which(ident_groups_id==ident_groups_id[m])
##}
#----------------------------------------------------------
#-----------------------
resullt_ <-NULL
#getting stable group ---------------------------------------------------------
stable_ <- ident_groups[(s_comb1[1]+1):((s_comb1[1])+s_comb1[2])]  #   ])
u_ <- unique(stable_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(stable_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
st_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
st_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
stable_gr_ <- cbind(st_label, st_size)
colnames(stable_gr_) <- c("id", "size")
resullt_ <- stable_gr_  #stable group
#getting stable group first ---------------------------------------------------------
rising_ <- ident_groups[1:s_comb1[1]]
u_ <- unique(rising_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-2
t_<-length(which(rising_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(rising_gr_[,1])==as.vector(stable_gr_[,1])){
rs_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
rs_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
rising_gr_ <-  cbind(rs_label, rs_size)
colnames(rising_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, rising_gr_)  #rising group
#getting third (falling) group first ---------------------------------------------------------
falling_ <- ident_groups[(((s_comb1[1])+s_comb1[2])+1):length(ident_groups)]
u_ <- unique(falling_)
tab_ <- NULL
for(k in 1:length(u_)){#k<-1
t_<-length(which(falling_==u_[k]))
tab_<-rbind(tab_, cbind(u_[k],t_))
}
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[1],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
#check if rising gr_ dominate this group too..
if(as.vector(falling_gr_[,1])==as.vector(stable_gr_[,1])){
fg_label <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],1]
fg_size <- tab_[order(-as.numeric(as.character(tab_[,2])))[2],2]
falling_gr_ <-  cbind(fg_label, fg_size)
colnames(falling_gr_) <- c("id", "size")
}
#append to stable group
resullt_ <- rbind(resullt_, falling_gr_)  #rising group
ccr <- round(sum(as.numeric(as.character(resullt_[,2])))/sum(s_comb1), digits = 3)
ccr_accuracy[r,1] <- sd_[r]
ccr_accuracy[r,2] <- ccr
flush.console()
print(paste(r, length(sd_), sep="_of_"))
print(ccr)
}
#--
getwd()
r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
for(r in 1:length(sd_)){ #r<-1
sim_data <- read.table(file=paste(wd, sim_, "_", sd_[r], "_", "arti_data", ".csv", sep=""), sep=",", head=TRUE)
head(sim_data)
groups <- sim_data$group
theo_groups <- alphaLabel(groups) #convert to alphabets
theo_groups
sim_data_ <- as.data.frame(cbind(code=(1:nrow(sim_data)), sim_data[, 1:(ncol(sim_data)-1)]))
head(sim_data_)
# traj  <-  sim_data_
#AKMEDOIDS
#-----------------------------------------------------
res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=3)
#res_ <- akmedoids.clust(sim_data_, id_field=TRUE, method="linear", k=c(3:20))
clusters <- as.vector(res_$solution)
#clusters <- as.vector(res_$optimSolution)
ident_groups <- clusters
ident_groups
#ident_groups_1 <- ident_groups
