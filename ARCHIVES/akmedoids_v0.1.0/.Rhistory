par(xpd=FALSE)
#line legend
plot_colors <- c("black","red")
text <- c("line joining observed points", "regression line predicting missing points")
plot.new()
par(xpd=TRUE)
legend("center",legend = text, text.width = max(sapply(text, strwidth)),
col=plot_colors, lwd=1, cex=1, lty=c(1,2), horiz = FALSE)
par(xpd=FALSE)
#view the data first few rows
head(population)
nrow(population) #no. of rows
ncol(population) #no. of columns
#create a matrix of the same rows and column as the `traj` data
pop <- as.data.frame(matrix(0, nrow(population), ncol(traj)))
colnames(pop) <- names(traj)
pop[,1] <- as.vector(as.character(population[,1]))
pop[,4] <- as.vector(as.character(population[,2]))
pop[,8] <- as.vector(as.character(population[,3]))
list_ <- c(2, 3, 5, 6, 7, 9, 10)
for(u_ in 1:length(list_)){ #u_<-1
pop[,list_[u_]] <- "NA"
}
#transfer the `location_id`
#c(population$location_id, names(traj)[2:ncol(traj)])
#colnames(pop) <- c(population$location_id[1], names(traj)[2:ncol(traj)])
#pop$location_id <- populaton$location_ids
head(pop)
population2 <- pop
#the
pop_imp_result <- dataImputation(population2, id_field = TRUE, method = 2,
replace_with = 1, fill_zeros = FALSE)
head(pop_imp_result)
#Example of estimation of crimes per 200 residents
crime_per_200_people <- rates(imp_traj, denomin=pop_imp_result, id_field=TRUE,
multiplier = 200)
#view the result
crime_per_200_people
#check the number of rows
nrow(crime_per_200_people)
#Proportions of crimes per 200 residents
prop_crime_per200_people <- props(crime_per_200_people, id_field = TRUE)
prop_crime_per200_people
getwd()
setwd("C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data"
)
save(cityA.cpg, cityA.dbf, cityA.prj, cityA.sbn,
cityA.sbx, cityA.shp, cityA.shp, cityA.shx, file = "cityA.RData")
save(cityA.*, file = "cityA.RData")
save(cityA, file = "cityA.RData")
WM_LSOA <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", "wm_bm_hex_RH_method")  #head(WM_LSOA@data)
library(rgdal)
WM_LSOA <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", "wm_bm_hex_RH_method")  #head(WM_LSOA@data)
WM_LSOA <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layers="wm_bm_hex_RH_method")  #head(WM_LSOA@data)
WM_LSOA <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layers="cityA")  #head(WM_LSOA@data)
WM_LSOA <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layer="cityA")  #head(WM_LSOA@data)
shp <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layer="cityA")
plot(shp, pch=1)
library(rgdal)
library(ggplot2)
shp <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layer="cityA")
plot(shp, pch=1)
spatdata=shp
spatdata
fort_spatdata <- fortify(spatdata)
ggplot()+ geom_polygon(data=fort_spatdata)
output
as.vector(output$optimSolution)
prop_crime_per200_people
clustr <- as.vector(output$optimSolution)
clustr_with_id <- as.data.frame(cbind(prop_crime_per200_people$location_ids, clustr))
#combine the location ids to their corresponding cluster membership
clustr_with_id <- as.data.frame(cbind(prop_crime_per200_people$location_ids, clustr))
colnames(clustr_with_id) <- c("id", "gr_member")
clustr_with_id
prop_crime_per200_people$location_ids
as.vector(prop_crime_per200_people$location_ids)
#combine the location ids to their corresponding cluster membership
clustr_with_id <- as.data.frame(cbind(as.vector(prop_crime_per200_people$location_ids),
clustr))
colnames(clustr_with_id) <- c("id", "gr_member")
clustr_with_id
spatdata
#check the data
shp@data
#check the data
head(shp@data)
head(shp@data)
spatdata=shp
sField = "LSOAcod"
class_gr = c(2,1,2)
sField = "LSOAcod"
col = c("blue", "yellow", "red")
list(class_gr)
grp_ <- list(class_gr)
grp_
class_collate <- list() #to hold the clusters list in each class...
cc_ <- 0
countt_ <- 0
#spatial patterning
length(grp_)
sum(grp_)
grp_[[1]]
sum(grp_[[1]])
q<-1
length(grp_[[1]])
q<-1
intersect_ <- NULL
#combine
colat_<- NULL
cc_ <- 0
countt_ <- 0
grp_[[1]][q]
spatdata
sField
colnames(spatdata@data)
loc_ <-  which(colnames(spatdata@data)==sField)
loc_
spatdata@data[,loc_]
as.vector(spatdata@data[,loc_]))
as.vector(spatdata@data[,loc_])
clustr_with_id
uniq_ <- unique(clustr_with_id)[order(unique(clustr_with_id))]
as.vector(clustr_with_id[,2]))
as.vector(clustr_with_id[,2])
as.vector(clustr_with_id[,1])
unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
uniq_ <- unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
uniq_
class_collate <- list() #to hold the clusters list in each class...#sum(grp_[[1]])
which(as.vector(spatdata@data[,loc_]) == uniq_[f])
f<-1
which(as.vector(spatdata@data[,loc_]) == uniq_[f])
uniq_[f])
uniq_[f]
as.vector(spatdata@data[,loc_])
which(as.vector(clustr_with_id[,1]) == uniq_[f])
clustr_with_id[,1]
as.vector(clustr_with_id[,1])
which(as.vector(clustr_with_id[,2]) == uniq_[f])
as.vector(clustr_with_id[,2])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]
which(as.vector(spatdata@data[,loc_]) %in% as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])])
sp::plot(spatdata, col="grey", border="grey", pch=16)
sp::plot(spatdata, col=" ", border="grey", pch=16)
sp::plot(spatdata, col="white", border="grey", pch=16)
grp_ <- list(class_gr)
## grp_ <- list(c(1), c(2:7), c(8:12)) #for
#retrieve the unique ids
uniq_ <- unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
class_collate <- list() #to hold the clusters list in each class...#sum(grp_[[1]])
q<-1
length(grp_[[1]])
#for(p in 1:length(cluster_Units_ALL)){
intersect_ <- NULL
#combine
colat_<- NULL
#detect which column is the id
loc_ <-  which(colnames(spatdata@data)==sField)
color = c("blue", "yellow", "red")
color
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])])], add=TRUE, col=color[q])
color[q]
spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])])
)
spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])])]
which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])])
spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),]
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
colat_<- NULL
for(f in 1:grp_[[1]][q]){ # f<-2
#detect which column is the id
loc_ <-  which(colnames(spatdata@data)==sField)
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
sp::plot(WM_LSOA[which(as.vector(spatdata$OAcode)%in%colat_),], add=TRUE, col=colours[cc_], pch=16) #
#intersect_ <- c(intersect_, colat_)
}
#combine
colat_<- NULL
for(f in 1:grp_[[1]][q]){ # f<-2
#detect which column is the id
loc_ <-  which(colnames(spatdata@data)==sField)
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
# sp::plot(WM_LSOA[which(as.vector(spatdata$OAcode)%in%colat_),], add=TRUE, col=colours[cc_], pch=16) #
#intersect_ <- c(intersect_, colat_)
}
#spatial patterning
for(q in 1:length(grp_[[1]])){ #q<-1
#for(p in 1:length(cluster_Units_ALL)){
intersect_ <- NULL
#combine
colat_<- NULL
for(f in 1:grp_[[1]][q]){ # f<-2
#detect which column is the id
loc_ <-  which(colnames(spatdata@data)==sField)
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
# sp::plot(WM_LSOA[which(as.vector(spatdata$OAcode)%in%colat_),], add=TRUE, col=colours[cc_], pch=16) #
#intersect_ <- c(intersect_, colat_)
}
# class_collate[[q]] <- intersect_
#countt_ <- countt_ + length(unlist(grp_[c(q)]))
#head(WM_LSOA@data)
}
#}
shp <- readOGR(dsn="C:/Users/monsu/Documents/GitHub/Packages/akmedoids/data", layer="cityA")
plot(shp, pch=1)
clustr <- as.vector(output$optimSolution)
#combine the location ids to their corresponding cluster membership
clustr_with_id <- as.data.frame(cbind(as.vector(prop_crime_per200_people$location_ids),
clustr))
colnames(clustr_with_id) <- c("id", "gr_member")
#check the data
head(shp@data)
clustr
clustr_with_id
sp::plot(spatdata, col="white", border="grey", pch=16)
#expanding the classes
grp_ <- list(class_gr)
#retrieve the unique ids
uniq_ <- unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
uniq_
class_collate <- list() #to hold the clusters list in each class...#sum(grp_[[1]])
grp_[[1]]
q<-1
length(grp_[[1]])
#for(p in 1:length(cluster_Units_ALL)){
intersect_ <- NULL
#combine
colat_<- NULL
grp_[[1]][q]
f<-1
sField
loc_ <-  which(colnames(spatdata@data)==sField)
loc_
#which is the unique field?
loc_ <-  which(colnames(spatdata@data)==sField)
#for(p in 1:length(cluster_Units_ALL)){
intersect_ <- NULL
#combine
colat_<- NULL
f<-1
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
grp_[[1]]
grp_[[1]][q]
f<-2
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
# sp::plot(
q<-2
length(grp_[[1]])
q<-2
#for(p in 1:length(cluster_Units_ALL)){
intersect_ <- NULL
#combine
colat_<- NULL
grp_[[1]][q]
f<-1
color[q]
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[f])]),], add=TRUE, col=color[q])
# sp::pl
uniq_[f]
uniq_
sp::plot(spatdata, col="white", border="grey", pch=16)
#expanding the classes
grp_ <- list(class_gr)
## grp_ <- list(c(1), c(2:7), c(8:12)) #for
#retrieve the unique ids
uniq_ <- unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
class_collate <- list() #to hold the clusters list in each class...#sum(grp_[[1]])
#detect the 'id' field of the shapefile?
loc_ <-  which(colnames(spatdata@data)==sField)
c_ <- c_ + 1
#spatial patterning
for(q in 1:length(grp_[[1]])){ #q<-2
c_ <- c_ + 1 #counter
intersect_ <- NULL
colat_<- NULL
for(f in 1:grp_[[1]][q]){ # f<-1
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[c_])]),], add=TRUE, col=color[q])
# sp::plot(WM_LSOA[which(as.vector(spatdata$OAcode)%in%colat_),], add=TRUE, col=colours[cc_], pch=16) #
#intersect_ <- c(intersect_, colat_)
}
# class_collate[[q]] <- intersect_
#countt_ <- countt_ + length(unlist(grp_[c(q)]))
#head(WM_LSOA@data)
}
#}
sp::plot(spatdata, col="white", border="grey", pch=16)
#expanding the classes
grp_ <- list(class_gr)
## grp_ <- list(c(1), c(2:7), c(8:12)) #for
#retrieve the unique ids
uniq_ <- unique(as.vector(clustr_with_id[,2]))[order(unique(as.vector(clustr_with_id[,2])))]
class_collate <- list() #to hold the clusters list in each class...#sum(grp_[[1]])
#detect the 'id' field of the shapefile?
loc_ <-  which(colnames(spatdata@data)==sField)
c_ <- 0
#spatial patterning
for(q in 1:length(grp_[[1]])){ #q<-2
intersect_ <- NULL
colat_<- NULL
for(f in 1:grp_[[1]][q]){ # f<-1
c_ <- c_ + 1 #counter
sp::plot(spatdata[which(as.vector(spatdata@data[,loc_]) %in%
as.vector(clustr_with_id[,1])[which(as.vector(clustr_with_id[,2]) == uniq_[c_])]),], add=TRUE, col=color[q])
}
}
legend("bottomleft",
legend = names(attr(color, "table")),
title = "Percent",
fill = attr(color, "palette"),
cex = 0.56,
bty = "n") # border
system("R CMD Rd2pdf . --title = Package akmeans --output=./manual3.pdf --force --no-clean --internals")
getwd()
library(akmedoids)
system("R CMD Rd2pdf . --title = Package akmeans --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title = Package akmedoids --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
library(akmedoids)
getwd()
usethis::use_cran_comments()
install.packages("remotes")
remotes::install_github("r-hub/rhub")
library(rhub)
validate_email()
validate_email()
usethis::browse_github_pat()
validate_email()
Sys.getenv("GITHUB_PAT")
validate_email()
library(rhub)
validate_email()
validate_email()
check()
check_on_linux()
check_on_windows()
ch <- check_for_cran("package", show_status = FALSE)
ch <- check_for_cran("akmedoids", show_status = FALSE)
ch <- check_for_cran("akmedoids")
ch <- check_for_cran()
cran_prep <- check_for_cran()
library(rhub)
library(akmedoids)
library(rhub)
cran_prep <- check_for_cran()
print(traj)
dataImputation(traj, id_field = TRUE, method = 1, replace_with = 1, fill_zeros = FALSE)
as.data.frame(traj)
traj
data(traj)
library(akmedoids)
library(akmedoids)
cran_prep <- check_for_cran()
library(akmedoids)
cran_prep <- check_for_cran()
library(akmedoids)
cran_prep <- check_for_cran()
library(akmedoids)
cran_prep <- check_for_cran()
library(akmedoids)
cran_prep$cran_summary()
cran_prep
cran_prep <- check_for_cran()
cran_prep$cran_summary()
cran_prep
cran_summary()
library(rhub)
cran_summary()
cran_prep$cran_summary()
library(akmedoids)
library(rhub)
cran_prep <- check_for_cran()
cran_prep$cran_summary()
system("R CMD Rd2pdf . --title = Package akmeans --output=./manual.pdf --force --no-clean --internals")
check_on_windows()
library(akmedoids)
cran_prep <- check_for_cran()
check_on_windows()
check_on_windows()
cran_prep <- check_for_cran()
check_on_linux()
check()
check()
check()
check()
check()
check()
check()
cran_summary()
library(rhub)
cran_summary()
previous_builds$summary()$check_id[1]
check_with_sanitizers()
previous_builds <- rhub::list_package_checks(email = NULL,
howmany = 2)
previous_builds
check_id <- previous_builds$summary()$check_id[1]
previous_builds$get_check(check_id)
group_check$urls()
cran_prep <- check_for_cran()
library(akmedoids)
check()
library(akmedoids)
check()
devtools::build()
library(akmedoids)
traj
dataImputation(traj, id_field = TRUE, method = 1, replace_with = 1, fill_zeros = FALSE)
R CMD check akmedoids
R CMD check
check()
R-devel CMD check akmedoids --as-cran
check()
devtools::build()
check()
library(rhub)
check()
devtools::build()
devtools::build()
install.packages("flextable")
library(flextable)
?Sys.setenv
Sys.getenv("R_TEST")
Sys.unsetenv("R_TEST")
Sys.setenv(R_GSCMD = "C:\\Program Files (x86)\\gs\\gs9.19\\bin\\gswin32c.exe")
library(roxygen2)
check()
library(rhub)
check()
system.partition = 'c:'
dirs = c('Program Files', 'Program Files (x86)')
for (dir in dirs) {
dir.list = list.dirs(file.path(system.partition, dir), recursive = FALSE)
GsinList = grepl(pattern = 'gs', x = dir.list)
if (sum(GsinList) > 0) {
gsDirectory = which(GsinList == TRUE)
GsExeFiles = list.files(
dir.list[gsDirectory],
recursive = TRUE,
pattern = 'gswin',
include.dirs = TRUE,
full.names = TRUE
)[1]
message('Gs found! ~> ',GsExeFiles)
Sys.setenv(R_GSCMD = GsExeFiles)
break
}
}
Gs
system.partition = 'c:'
dirs = c('Program Files', 'Program Files (x86)')
for (dir in dirs) {
dir.list = list.dirs(file.path(system.partition, dir), recursive = FALSE)
GsinList = grepl(pattern = 'gs', x = dir.list)
if (sum(GsinList) > 0) {
gsDirectory = which(GsinList == TRUE)
GsExeFiles = list.files(
dir.list[gsDirectory],
recursive = TRUE,
pattern = 'gswin',
include.dirs = TRUE,
full.names = TRUE
)[1]
message('Gs found! ~> ',GsExeFiles)
Sys.setenv(R_GSCMD = GsExeFiles)
break
}
}
library(rhub)
check()
check()
library(rhub)
check()
check()
library(akmedoids)
library(akmedoids)
library(akmedoids)
sample(1:100, 10, replace=FALSE)
ids <- sample(1:100, 10, replace=FALSE)
ids
ids_alphab <- alphaLabel(ids)
ids_alphab
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual2.pdf --force --no-clean --internals")
citation(kml)
citation("kml")
citation("ggplot2")
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
devtools::build()
devtools::build()
library(akmedoids)
library(akmedoids)
library(akmedoids)
library(akmedoids)
system("R CMD Rd2pdf . --title = Package akmeans --output=./akmedoids_user_manual.pdf --force --no-clean --internals")
check()
check()
devtools::build()
